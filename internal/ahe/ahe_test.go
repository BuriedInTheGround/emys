package ahe_test

import (
	"bytes"
	"testing"

	"interrato.dev/emys/internal/ahe"
)

func TestKeyFromSeed(t *testing.T) {
	seed := []byte("YELLOW SUBMARINE, BLACK WIZARDRY")
	key, err := ahe.KeyFromSeed(seed, 4)
	if err != nil {
		t.Fatal(err)
	}
	want := []byte{
		0x00, 0x18, 0x48, 0x3f, 0x58, 0xde, 0xc3, 0xed, 0xf8, 0xcd, 0x22,
		0x2a, 0xb9, 0x56, 0x29, 0x0d, 0x76, 0x42, 0x7d, 0xd4, 0xce, 0xf8,
		0x1e, 0xf9, 0xa3, 0x78, 0x84, 0xec, 0x9b, 0x0d, 0xf7, 0x55, 0xf7,
		0x00, 0x5c, 0xe6, 0x7f, 0x39, 0xc3, 0x98, 0xf1, 0xab, 0x2c, 0x83,
		0x0c, 0x20, 0x35, 0x52, 0x82, 0xc5, 0x4a, 0xb2, 0x32, 0xf0, 0x2c,
		0x59, 0xc3, 0x6a, 0x95, 0xdb, 0x51, 0x98, 0xff, 0x99, 0x6f, 0xa4,
		0x00, 0x37, 0x4f, 0x42, 0xfb, 0x16, 0xee, 0xf9, 0x61, 0x8f, 0x57,
		0xd1, 0x9f, 0x64, 0x24, 0xd1, 0x28, 0xeb, 0xac, 0x03, 0xaf, 0x01,
		0xf4, 0x1e, 0x5c, 0xf0, 0xc9, 0x63, 0xf7, 0xb6, 0xfc, 0x09, 0xd2,
		0x00, 0x87, 0xd3, 0xe4, 0xf0, 0xfb, 0x37, 0xef, 0x4c, 0x3f, 0x19,
		0xc7, 0xbc, 0x96, 0x2e, 0xbc, 0xb9, 0x50, 0xf3, 0x73, 0xe9, 0x58,
		0x8a, 0x5f, 0xa5, 0x1e, 0x71, 0x7f, 0x95, 0x8c, 0x5f, 0x36, 0x3c,
	}
	if !bytes.Equal(key, want) {
		t.Errorf("KeyFromSeed(%x) = %x, want %x", seed, key, want)
	}
}

func TestEncryptDecrypt(t *testing.T) {
	seed := []byte("YELLOW SUBMARINE, BLACK WIZARDRY")
	tests := []struct {
		blocks     uint64
		plaintext  []byte
		ciphertext []byte
	}{
		{
			blocks: 1,
			plaintext: []byte{
				0x00, 0xef, 0x79, 0x13, 0xca, 0xd8, 0x5a, 0xd5, 0x16, 0x58, 0x0e,
				0x35, 0xbb, 0x70, 0x24, 0x51, 0xdf, 0xab, 0xe7, 0xb4, 0xe9, 0xa4,
				0xbd, 0x66, 0x59, 0x4d, 0x37, 0x72, 0x4f, 0x14, 0xf1, 0xb1, 0x8f,
			},
			ciphertext: []byte{
				0x00, 0x07, 0xc1, 0x53, 0x23, 0xb7, 0x1e, 0xc3, 0x0f, 0x25, 0x30,
				0x60, 0x74, 0xc6, 0x4d, 0x5f, 0x55, 0xee, 0x65, 0x89, 0xb7, 0x9c,
				0xdc, 0x5f, 0xfc, 0xc5, 0xbc, 0x5e, 0xea, 0x22, 0xe9, 0x07, 0x87,
			},
		},
		{
			blocks: 3,
			plaintext: []byte{
				0x00, 0xbc, 0x89, 0x82, 0x2c, 0x9c, 0x37, 0xca, 0xf1, 0x20, 0x09,
				0x5e, 0x2b, 0x1e, 0x3a, 0x81, 0xda, 0xc0, 0x22, 0xcf, 0x59, 0x9d,
				0x87, 0x13, 0x4f, 0xe6, 0x80, 0xb4, 0xbe, 0x45, 0x6d, 0x8f, 0xfc,
				0x00, 0x24, 0xf0, 0x64, 0xdd, 0xbf, 0xaf, 0x5f, 0x46, 0xc3, 0x08,
				0xae, 0xdb, 0xdb, 0xb5, 0x32, 0xcb, 0x2f, 0xb4, 0x64, 0xf7, 0xb2,
				0x05, 0xef, 0xec, 0x4b, 0xbb, 0xa4, 0xac, 0x0c, 0x5a, 0x50, 0x3c,
				0x00, 0xe4, 0xf7, 0xb7, 0xf8, 0x35, 0x31, 0x56, 0x80, 0x96, 0xd6,
				0x18, 0x60, 0x91, 0xcf, 0xf3, 0x37, 0x29, 0xc4, 0x58, 0xe6, 0x39,
				0x58, 0xc1, 0x02, 0xbf, 0x9b, 0x37, 0x68, 0x01, 0x75, 0x34, 0x23,
			},
			ciphertext: []byte{
				0x00, 0xd4, 0xd1, 0xc1, 0x85, 0x7a, 0xfb, 0xb8, 0xe9, 0xed, 0x2b,
				0x88, 0xe4, 0x74, 0x63, 0x8f, 0x51, 0x02, 0xa0, 0xa4, 0x28, 0x95,
				0xa6, 0x0c, 0xf3, 0x5f, 0x05, 0xa1, 0x59, 0x53, 0x64, 0xe5, 0xf3,
				0x00, 0x81, 0xd6, 0xe4, 0x17, 0x83, 0x48, 0x50, 0xf1, 0xef, 0x8b,
				0xba, 0xfc, 0x11, 0x07, 0xb5, 0x90, 0x7a, 0x66, 0x97, 0xe7, 0xde,
				0x5f, 0xb3, 0x56, 0xe1, 0x96, 0xf6, 0x45, 0x0b, 0xf3, 0xbf, 0xe0,
				0x00, 0x1c, 0x46, 0xfa, 0xf3, 0x4c, 0x20, 0x4f, 0xe2, 0x26, 0x2d,
				0xe9, 0xff, 0xf5, 0xf4, 0xc4, 0x60, 0x15, 0x70, 0x5c, 0x94, 0x3b,
				0x4c, 0xdf, 0x5f, 0xb0, 0x64, 0x9b, 0x5f, 0xb8, 0x71, 0x3d, 0xf6,
			},
		},
	}
	for _, tt := range tests {
		key, err := ahe.KeyFromSeed(seed, tt.blocks)
		if err != nil {
			t.Fatal(err)
		}
		ciphertext, err := ahe.Encrypt(key, tt.plaintext)
		if err != nil {
			t.Fatal(err)
		}
		if !bytes.Equal(ciphertext, tt.ciphertext) {
			t.Errorf("Encrypt(%x, %x) = %x, want %x", key, tt.plaintext, ciphertext, tt.ciphertext)
		}
		plaintext, err := ahe.Decrypt(key, tt.ciphertext)
		if err != nil {
			t.Fatal(err)
		}
		if !bytes.Equal(plaintext, tt.plaintext) {
			t.Errorf("Decrypt(%x, %x) = %x, want %x", key, tt.ciphertext, plaintext, tt.plaintext)
		}
	}
}
