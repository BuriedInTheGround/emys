package ahmac_test

import (
	"bytes"
	"testing"

	"interrato.dev/emys/internal/ahmac"
)

func TestMAC(t *testing.T) {
	ikey := ahmac.UniformKey([]byte("YELLOW SUBMARINE, BLACK WIZARDRY"))
	akey := ahmac.UniformKey([]byte("BLACK WIZARDRY, YELLOW SUBMARINE"))
	msg := []byte{
		0x00,
		0x7d, 0x76, 0xcc, 0xe1, 0xe3, 0x01, 0x51, 0x04,
		0xe1, 0x86, 0x48, 0xac, 0xd9, 0x2c, 0x10, 0x24,
		0xcf, 0xe3, 0x98, 0x71, 0xfa, 0x1d, 0xc6, 0x0d,
		0x92, 0x72, 0x60, 0x80, 0xaf, 0x2c, 0x0d, 0xee,
		0x00,
		0xbf, 0xc1, 0x2d, 0x25, 0x77, 0x89, 0xc4, 0x76,
		0xd5, 0xdc, 0xa9, 0xbe, 0x09, 0xfc, 0x41, 0xdc,
		0x53, 0x28, 0xf0, 0xa2, 0x56, 0x0d, 0x26, 0x06,
		0xc0, 0x6a, 0xd9, 0xf8, 0x7c, 0xb5, 0x99, 0x04,
		0x00,
		0x66, 0xa7, 0x1f, 0x85, 0x79, 0x54, 0x3d, 0xf0,
		0xcc, 0x5a, 0xf7, 0x62, 0xeb, 0x8f, 0x45, 0x1f,
		0x07, 0xc1, 0x51, 0x60, 0x3c, 0x41, 0x74, 0x16,
		0xc7, 0x64, 0x3a, 0xfb, 0x8b, 0x48, 0xd7, 0x09,
	}
	tag, err := ahmac.MAC(ikey, akey, msg)
	if err != nil {
		t.Fatal(err)
	}
	want := []byte{
		0x00, 0xa9, 0xad, 0xec, 0xb9, 0x88, 0x11, 0xa7, 0x0e, 0x05, 0xd7,
		0x80, 0xff, 0xaf, 0xf1, 0xf8, 0x59, 0x73, 0xad, 0x33, 0xd1, 0xae,
		0x45, 0x93, 0xf9, 0x1a, 0x3a, 0xb6, 0xbc, 0x40, 0x3a, 0x23, 0x6a,
	}
	if !bytes.Equal(tag, want) {
		t.Errorf("MAC(%x, %x, %x) = %x, want %x", ikey, akey, msg, tag, want)
	}
}

func TestAdd(t *testing.T) {
	x := []byte("YELLOW SUBMARINE, BLACK WIZARDRY")
	y := []byte("BLACK WIZARDRY, YELLOW SUBMARINE")
	z := make([]byte, ahmac.Size)
	if err := ahmac.Add(z, x); err != nil {
		t.Fatal(err)
	}
	if err := ahmac.Add(z, y); err != nil {
		t.Fatal(err)
	}
	want := []byte{
		0x00, 0x9b, 0x91, 0x8d, 0x8f, 0x9a, 0x77, 0x77, 0x9c, 0xaf, 0x83,
		0x9f, 0x85, 0xa4, 0xa2, 0x7a, 0x65, 0x85, 0x65, 0x8e, 0x98, 0x90,
		0x9a, 0x6b, 0x73, 0xac, 0x8b, 0xa7, 0x82, 0xa4, 0x8d, 0xa0, 0x9e,
	}
	if !bytes.Equal(z, want) {
		t.Errorf("Add(%x, %x) = %x, want %x", x, y, z, want)
	}
}
